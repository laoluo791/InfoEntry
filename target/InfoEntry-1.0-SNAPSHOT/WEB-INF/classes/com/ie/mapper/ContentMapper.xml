<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ie.mapper.ContentMapper" >
  <resultMap id="BaseResultMap" type="com.ie.pojo.Content" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="type" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.ie.pojo.Content" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="type" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="content" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, type, user
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>

  <select id="selectByTypeIdAndUserId" resultType="com.ie.pojo.Content">
    select *
    from content
    where type = #{typeId} and user = #{userId}
  </select>

  <select id="selectByTypeId" resultType="com.ie.pojo.Content">
    select *
    from content
    where type = #{typeId}
  </select>

  <select id="selectTableContentByTypeId" resultType="java.util.HashMap">
    SELECT `user`.`name`,`user`.no,content.content FROM content
    right JOIN user
    on `user`.id = content.user and (content.type = #{typeId} or content.type is null)
    ORDER BY user.`no`
  </select>

  <select id="getYesInputNumByTypeId" resultType="int">
    select count(*) from content
    where type = #{typeId}
  </select>

  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from content
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from content
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ie.pojo.Content" >
    insert into content (id, type, user, 
      content)
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{user,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ie.pojo.Content" >
    insert into content
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="user != null" >
        user,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="user != null" >
        #{user,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ie.pojo.Content" >
    update content
    <set >
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="user != null" >
        user = #{user,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ie.pojo.Content" >
    update content
    set type = #{type,jdbcType=INTEGER},
      user = #{user,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ie.pojo.Content" >
    update content
    set type = #{type,jdbcType=INTEGER},
      user = #{user,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>